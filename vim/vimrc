
execute pathogen#infect()

if has('autocmd')
  filetype plugin indent on
endif
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

set number
set hlsearch
set showmatch
set ignorecase
set smartcase

set tabstop=4
set shiftwidth=4
set expandtab
set smartindent

set modeline

"set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P

set autoindent
set backspace=indent,eol,start
"set complete-=i
set smarttab

"set nrformats-=octal
"set shiftround

"set ttimeout
"set ttimeoutlen=100

set incsearch
" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

set laststatus=2
set ruler
set showcmd
set wildmenu

if !&scrolloff
  set scrolloff=1
endif
if !&sidescrolloff
  set sidescrolloff=5
endif
set display+=lastline

if &encoding ==# 'latin1' && has('gui_running')
  set encoding=utf-8
endif

if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
  if !has('win32') && (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8')
    let &listchars = "tab:\u21e5 ,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u00b7"
  endif
endif

"if &shell =~# 'fish$'
"  set shell=/bin/bash
"endif

"set autoread
set fileformats+=mac

if &history < 1000
  set history=1000
endif
if &tabpagemax < 50
  set tabpagemax=50
endif
if !empty(&viminfo)
  set viminfo^=!
endif

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux'
  set t_Co=16
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

inoremap <C-U> <C-G>u<C-U>


if has('mouse')
  set mouse=a
endif

set background=dark
let solarized_termtrans=1
colorscheme solarized


"""" GUI stuff """"

if has('gui_running')
	set guifont=Consolas:h11:cANSI
    set guioptions-=m  "remove menu bar
    set guioptions-=T  "remove toolbar
    set guioptions-=r  "remove right-hand scroll bar
    "set guioptions-=L  "remove left-hand scroll bar

    nnoremap <C-F2> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>
    nnoremap <C-F3> :if &go=~#'T'<Bar>set go-=T<Bar>else<Bar>set go+=T<Bar>endif<CR>
    nnoremap <C-F4> :if &go=~#'r'<Bar>set go-=r<Bar>else<Bar>set go+=r<Bar>endif<CR>
endif


"""" File type commands """"

" set shorter shift width for some file types
au FileType c,r,html,vim setlocal tabstop=2 shiftwidth=2

" smart indenting for python files
au FileType python set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class

" recognise spss syntax files
au BufRead,BufNewFile *.sps set filetype=sps
au FileType sps set commentstring=\*%s

" higlight lines over 80 chars for some file types
highlight OverLength ctermbg=red ctermfg=DarkGrey guibg=DarkRed 
au FileType c,r,python,java match OverLength /\%81v.\+/


"""" Function key shortcuts """"

" Shortcuts for NERDTree
map <F2> :NERDTreeToggle<cr>
map <F3> :NERDTreeMirror<cr>
let NERDTreeIgnore=['\~$']
let NERDTreeShowBookmarks=1

" Shortcuts for diff
map <F4> :set invdiff<CR>:set invscrollbind<CR>
map <F5> :diffget<CR>
map <F6> :diffput<CR

map <F8> :!make<CR>
imap <F8> <ESC>:!make<CR>

" completion
imap <F9> <C-N><C-P>
map <F9> i<C-N><C-P>

" Buffers - explore/next/previous: Alt-F12, F12, Shift-F12.
"nnoremap <silent> <F10> :BufExplorer<CR>
nnoremap <F11> :bprev<CR>
nnoremap <F12> :bnext<CR>


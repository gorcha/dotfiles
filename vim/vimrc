let g:pathogen_disabled = []

call add(g:pathogen_disabled, 'python-mode')
call add(g:pathogen_disabled, 'taglist')
let s:tags='tagbar'

execute pathogen#infect()
execute pathogen#helptags()

if has('autocmd')
  filetype plugin indent on
endif
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

set number
set hlsearch
set showmatch
set ignorecase
set smartcase

set tabstop=4
set shiftwidth=4
set expandtab
set smartindent

set modeline

"set statusline=%<%f\ [TYPE=%Y\ %{&ff}]\ %h%m%r%w%=%-14.(%l,%c%V%)\ %P
set statusline=%<%f\ [TYPE=%Y\ %{&ff}]\ %h%m%r%w\ %{SyntasticStatuslineFlag()}%=%-14.(%l,%c%V%)\ %P
"set statusline=%F%m%r%h%w\ [TYPE=%Y\ %{&ff}]\ \ [%l/%L\ (%p%%)

set autoindent
set backspace=indent,eol,start
"set complete-=i
set smarttab

"set nrformats-=octal
"set shiftround

"set ttimeout
"set ttimeoutlen=100

set incsearch
" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

set laststatus=2
set ruler
set showcmd
set wildmenu

if !&scrolloff
  set scrolloff=1
endif
if !&sidescrolloff
  set sidescrolloff=5
endif
set display+=lastline

if &encoding ==# 'latin1' && has('gui_running')
  set encoding=utf-8
endif

if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
  if !has('win32') && (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8')
    let &listchars = "tab:\u21e5 ,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u00b7"
  endif
endif

"if &shell =~# 'fish$'
"  set shell=/bin/bash
"endif

"set autoread
set fileformats+=mac

if &history < 1000
  set history=1000
endif
if &tabpagemax < 50
  set tabpagemax=50
endif
if !empty(&viminfo)
  set viminfo^=!
endif

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux'
  set t_Co=16
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

inoremap <C-U> <C-G>u<C-U>


if has('mouse')
  set mouse=a
endif

set background=dark
let solarized_termtrans=1
colorscheme solarized



"""" GUI stuff """"

if has('gui_running')
  if has('win32')
    set guifont=Consolas:h11:cANSI
  endif
  set guioptions-=m  "remove menu bar
  set guioptions-=T  "remove toolbar
  set guioptions-=r  "remove right-hand scroll bar
  "set guioptions-=L  "remove left-hand scroll bar

  nnoremap <C-F2> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>
  nnoremap <C-F3> :if &go=~#'T'<Bar>set go-=T<Bar>else<Bar>set go+=T<Bar>endif<CR>
  nnoremap <C-F4> :if &go=~#'r'<Bar>set go-=r<Bar>else<Bar>set go+=r<Bar>endif<CR>
endif



"""" File type commands """"

" set shorter shift width for some file types
au FileType c,r,html,vim,javascript,css setlocal tabstop=2 shiftwidth=2

" smart indenting for python files
au FileType python set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class

" recognise spss syntax files
au BufRead,BufNewFile *.sps set filetype=sps

" higlight lines over 80 chars for some file types
highlight OverLength ctermbg=red ctermfg=DarkGrey guibg=DarkRed 
au FileType c,r,python,java match OverLength /\%81v.\+/

" comment strings
au FileType r set commentstring=#\ %s
au FileType sps set commentstring=\*%s



"""" Function key shortcuts """"


" Shortcuts for NERDTree
let NERDTreeIgnore=['\~$']
let NERDTreeShowBookmarks=1
let NERDTreeChDirMode=2
map <F2> :NERDTreeToggle<cr>
map <C-F2> :NERDTreeMirror<cr>


" Tag Plugin Configuration (either tagbar or taglist)

" Taglist
if s:tags == 'taglist'
  if has('win32')
    let Tlist_Ctags_Cmd='"%HOMEPATH%/local/bin/ctags/ctags.exe"'
  else
    let Tlist_Ctags_Cmd='/usr/bin/ctags'
  endif
  let Tlist_GainFocus_On_ToggleOpen = 1
  let Tlist_Close_On_Select = 0
  let Tlist_Use_Right_Window = 1
  let Tlist_File_Fold_Auto_Close = 1
  " add r support
  let tlist_r_settings = 'R;f:Functions;g:GlobalVariables;v:FunctionVariables'
  let tlist_sps_settings = 'SPS;m:Macros'
  map <F3> :TlistToggle<CR>

" Tagbar
elseif s:tags == 'tagbar'
  let g:tagbar_autoclose = 0
  let g:tagbar_autofocus = 1
  " add r support
  let g:tagbar_type_r = {
      \ 'ctagstype' : 'r',
      \ 'kinds'     : [
          \ 'f:Functions',
          \ 'g:GlobalVariables',
          \ 'v:FunctionVariables',
      \ ]
  \ }
  let g:tagbar_type_sps = {
      \ 'ctagstype' : 'sps',
      \ 'kinds'     : [
          \ 'm:Macros',
          \ 'f:File Handles',
      \ ]
  \ }
  map <F3> :TagbarToggle<CR>

endif
unlet! s:tags


" Shortcuts for diff
map <F4> :set invdiff<CR>:set invscrollbind<CR>
map <F5> :diffget<CR>
map <F6> :diffput<CR>


" completion
"imap <F8> <C-N><C-P>
"map <F8> i<C-N><C-P>


" Syntastic setup
let g:syntastic_check_on_open = 1
let g:syntastic_auto_loc_list = 1
"let g:syntastic_error_symbol = '✘'
"let g:syntastic_warning_symbol = '⚠'
let g:syntastic_mode_map = { 'mode': 'passive',
                            \ 'active_filetypes': [],
                            \ 'passive_filetypes': [] }

command -bang -nargs=? ToggleErrors call SyntasticToggleErrors(<bang>0)
function! SyntasticToggleErrors(forced)
  if (!exists("g:syntastic_errors_on") || g:syntastic_errors_on == 1) && a:forced == 0
    lclose
    let g:syntastic_errors_on = 0
  else
    lopen
    let g:syntastic_errors_on = 1
  endif
endfunction


map <F9> :SyntasticCheck<CR>
imap <F9> <ESC>:SyntasticCheck<CR>
map <F10> :ToggleErrors<CR>
imap <F10> <ESC>:ToggleErrors<CR>


" Buffers - explore/next/previous: Alt-F12, F12, Shift-F12.
"nnoremap <silent> <F10> :BufExplorer<CR>
nnoremap <C-F12> :bprev<CR>
nnoremap <M-F12> :bnext<CR>

